<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: routing | Programifications]]></title>
  <link href="programifications.com/blog/categories/routing/atom.xml" rel="self"/>
  <link href="programifications.com/"/>
  <updated>2013-03-31T09:59:12-07:00</updated>
  <id>programifications.com/</id>
  <author>
    <name><![CDATA[Derrick Camerino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 3 Cheat Sheet]]></title>
    <link href="programifications.com/blog/2010/12/29/rails-3-cheat-sheet/"/>
    <updated>2010-12-29T23:45:00-08:00</updated>
    <id>programifications.com/blog/2010/12/29/rails-3-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Envy Labs just released some Rails 3 cheat sheets to aid the API usage of several components. The pdf can be found
<a href="http://blog.envylabs.com/post/29044764623/rails-3-cheat-sheets">here</a>.</p>

<h3>ROUTING API</h3>

<h2>Basic Routing</h2>

<p><code>ruby
YourApp::Application.routes.draw do
  resources :posts
  match '/all' =&gt; 'posts#index'
  root :to =&gt; "home#index"
end
</code></p>

<h2>Optional Parameters</h2>

<p>```ruby
match '/posts/(/:yy(/:mm))' => "posts#index"</p>

<p>class PostsController &lt; ApplicationController
  def index</p>

<pre><code># params[:yy]
# params[:mm]
</code></pre>

<p>  end
end
```</p>

<h2>Nested Routes</h2>

<p>```ruby
namespace :api do
  namespace :internal do</p>

<pre><code>resources :accounts do
  resources :orders
  member do
    get  :summary
    post :suspend
  end
  post :confirm, :on =&gt; :member
  collection do
    get :pending
  end
  get :blocked, :on =&gt; :collection
end
</code></pre>

<p>  end
end
```</p>

<h2>Redirection</h2>

<p><code>ruby
match '/sign_out'     =&gt; redirect("/signout")
match '/users/:name'  =&gt; redirect {|params| "/#{params[:name}"}
match '/google'       =&gt; redirect('http://google.com')
</code></p>

<h2>Named Routes</h2>

<p><code>ruby
match '/sign_in' =&gt; 'session#new', :as =&gt; 'sign_in' # Gives you sign_in_path helper
match '/reset_password/:token' =&gt; 'users#reset_password', :as =&gt; 'reset_password' # Gives reset_password_path('key')
</code></p>

<h1>Rack Routing</h1>

<p><code>ruby
get '/hello'          =&gt; proc {|env| [200, {}, "Hello Rack"]}
get '/rack_endpoint'  =&gt; PostsController.action(:index)
get '/rack_app'       =&gt; CustomRackApp
</code></p>

<h2>Constraints</h2>

<p>```ruby
match '/:year' => "posts#index",
  :constraints => {:year => /\d{4}/, :ip => /192.168.1.\d{1,3}/}</p>

<p>constraints(:host => /localhost/) do
  resources :posts
end</p>

<p>constraints IpRestrictor do # Responds to self.matches?(request)
  get 'admin/accounts' => "queenbee#accounts"
end
```</p>

<h2>Legacy Route</h2>

<p><code>ruby
match '/:controller(/:action(/:id(.:format)))' # Commented out by default
</code></p>

<h2>Scope</h2>

<p>```ruby
scope ':token', :token => /\w{5}/ do # Requires token parameter to get to resources and must by 5 alphanumeric characters
  resources :rooms do</p>

<pre><code>resources :meetings
</code></pre>

<p>  end
end</p>

<p>scope '(:locale)', :locale => /en|pl/ do # Local is optional for these routes
  resources :posts
  root :to => 'posts#index'
end
```</p>

<h3>BUNDLER</h3>

<h2>Bundler Commands</h2>

<p>```
$ bundle
'Make sure all dependencies in your Gemfile are available to your application. If they are not available, go install them.</p>

<p>$ bundle --without
'Installs everything except gems included in .</p>

<p>$ bundle --deployment
'Isolates all gems into vendor/bundle, requires up-to-date Gemfile.lock, use gems in vendor/cache if they exist.</p>

<p>$ bundle check
'Checks if the dependencies listed in Gemfile are satisfied by currently installed gems.</p>

<p>$ bundle show [gem_name]
'Shows all libraries which are included by the Gemfile and their dependencies. If [gem_name] is given, shows where it is located in the filesystem.</p>

<p>$ bundle open <br/>
'Opens the gem source in the default editor.</p>

<p>$ bundle update [gem_name]
'Recreates Gemfile.lock and runs 'bundle' to install new dependencies.</p>

<p>$ bundle package
'Copies all project gems to vendor/cache/ -- use this if you don't want to rely on external servers for deployment.
```</p>

<h2>Gemfile Syntax</h2>

<p>```ruby
source "http://rubygems.org"</p>

<p>gem "hpricot", "0.6"
gem "sqlite3-ruby", :require => "sqlite3"
gem "local_gem", :path => "~/Sites/local_gem"
gem "rails", :git => "git://github.com/rails/rails.git"</p>

<h1>Additional parameters</h1>

<h1>:branch => "branch_name"</h1>

<h1>:tag => "tag_number"</h1>

<h1>:ref => "ref_number"</h1>

<p>git "git://github.com/rails/rails.git" do
  # only these two gems will be fetched from the git repository
  gem "railties"
  gem "active_model"
end</p>

<p>group :test do
  gem "webrat"
end
```</p>

<h2>Creating a gemset for your app</h2>

<p><code>
$ rvm use _ruby_version_
$ rvm gemset create _name_
$ rvm gemset use _name_
$ gem install bundler
$ bundle
</code></p>

<h3>Workflow</h3>

<h2>Developing a new application</h2>

<ol>
<li>$ cd new_app/</li>
<li>$ bundle init # creates a new Gemfile</li>
<li>Add project dependencies</li>
<li>Check Gemfile and Gemfile.lock into VCS</li>
</ol>


<p>After adding or removing dependencies from Gemfile</p>

<ol>
<li>$ bundle</li>
<li><p>Commit Gemfile and Gemfile.lock
After modifying existing dependency versions</p></li>
<li><p>$ bundle update</p></li>
<li>Commit Gemfile and Gemfile.lock
Deploying your application</li>
</ol>


<p><code>
$ bundle pacakge # locally  
</code></p>

<p>Copies all app gems to vendor/cache</p>

<p><code>
$ bundle # server  
</code>
Installs gems from vendor/cache - no external server communication</p>

<p>For more info, visit <a href="http://gembundler.com">http://gembundler.com</a></p>

<h3>ACTIVERELATION</h3>

<h2>Lazy Loading</h2>

<p>```ruby
@posts = Post.where(:published => true)
if params[:order]
  @posts = @posts.order(params[:order])
end
@posts.each {|p| ... }</p>

<p>posts = Post.order(params[:order])
@published = posts.where(:published => true)
@unpublished = posts.where(:published => false)
```</p>

<h2>CRUD Methods</h2>

<p>```ruby
new(attributes)
create(attributes)
create!(attributes)
find(id_or_array)
destroy(id_or_array)
destroy_all
delete(id_or_array)
delete_all
update(ids, updates)
update_all(updates)
exists?</p>

<p>sports_posts = Post.where(:category => 'sports')
new_sports_post = sports_posts.new
new_sports_post.category # => 'sports'</p>

<p>sports_posts.update_all(:published => false)
sports_posts.exists? # => true
```</p>

<h2>Chain Methods</h2>

<p><code>
where
having
select
group
order
limit
offset
joins
includes
lock
readonly
from
</code></p>

<h2>Chaining</h2>

<p>```ruby
@posts = Post.where(:published => true).order(params[:order])</p>

<p>@joe_posts = Post.where(:auther => "Joe").includes(:comments).limit(10).all # .all forces query execution and returns an array, not a relation
```</p>

<h2>(Named) Scopes</h2>

<p><code>ruby
class Post &lt; ActiveRecord::Base
  default_scope order('title')
  scope :published, where(:published =&gt; true)
  scope :unpublished, where(:published =&gt; false)
</code></p>

<h2>Deprecated</h2>

<p><code>ruby
find(id_or_array, options) # All options are now sent using the chain methods
find(:first, options)
find(:all, options)
first(options)
all(options)
update_all(updates, conditions, options)
</code></p>

<h3>XSS PROTECTION &amp; UJS</h3>

<h2>XSS Protection</h2>

<p>```ruby
&lt;%= @post.body # safe by default %></p>

<p>&lt;%= raw(@post.body) # unsafe %></p>

<p>&lt;%= link_to raw("<span class='cart'>#{h @user_input}</span>"), cart_path # only h @user_input escaped, not the spans %>
```</p>

<h2>Unobtrusive JS</h2>

<p>```erb
&lt;%= link_to 'Show', @post, :remote => true %></p>

<h1>=> <a href="programifications.com/posts/1" data-remote="true">Show</a></h1>

<p>&lt;%= form_for(@post, :remote => true) do |f| %></p>

<h1>=> <form action="/posts" class="new_post" data-remote="true" id="new_post" method="posts"></h1>

<p>&lt;%= link_to 'Destroy', @post, :method => :delete %></p>

<h1>=> <a href="programifications.com/posts/1" data-method="delete" rel="nofollow">Destroy</a></h1>

<p>&lt;%= link_to 'Destroy', @post, :confirm => 'Are you sure?', :method => :delete %></p>

<h1>=> <a href="programifications.com/posts/1" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Destroy</a></h1>

<p>&lt;%= f.submit :disable_with => "Please wait..." %></p>

<h1>=> <input data-disable-with="Please wait..." id="post_submit" name="commit" type="submit" value="Create Post" /></h1>

<p>```</p>

<h2>HTML5 Custom Data Attributes</h2>

<p>```ruby
data-remote
data-confirm
data-method
data-disable-with</p>

<h1>Parsed by JavaScript drivers -- defaults to rails.js</h1>

<p>```</p>

<h2>Deprecated</h2>

<p>```ruby
link_to_remote
remote_form_for
observe_field
observe_form
form_remote_tag
button_to_remote
submit_to_remote
link_to_function
periodically_call_remote</p>

<h1>If you need to use any of the deprecated helpers, visit http://github.com/rails/prototype_legacy_helper</h1>

<p>```</p>

<h2>Using JQuery</h2>

<p>Go to <a href="https://github.com/rails/jquery-ujs">https://github.com/rails/jquery-ujs</a> for instructions</p>

<h3>ACTIONMAILER &amp; ACTIONCONTROLLER</h3>

<h2>Rails Mail Generator</h2>

<p>```
rails generate mail UserMail welcome forgot_password</p>

<h1>Creates:</h1>

<h1>app/mailers/user_mailer.rb</h1>

<h1>app/views/user_mailer/welcome.text.erb</h1>

<h1>app/views/user_mailer/forgot_password.text.erb</h1>

<p>```</p>

<h2>Basic Mailer Syntax</h2>

<p>```ruby
class UserMailer &lt; ActionMailer::Base
  def welcome(user, subdomain)</p>

<pre><code># instance variables are available within your view
@user = user
@subdomain = subdomain
mail(:from =&gt; 'admin@app.com',
     :to =&gt; @user.email,
     :subject =&gt; 'Welcome')
</code></pre>

<p>  end
end
```</p>

<h2>Delivering Messages</h2>

<p>```ruby
UserMailer.welcome(user, subdomain).deliver</p>

<h1>or</h1>

<p>message = UserMailer.welcome(user, subdomain)
message.deliver
```</p>

<h2>Defaults and Attachments</h2>

<p>```ruby
class UserMailer &lt; ActionMailer::Base
  default :from => 'admin@test.com',</p>

<pre><code>      :reply_to =&gt; 'noreply@test.com',
      "X-Time-Code" =&gt; Time.now.to_i.to_s
</code></pre>

<p>  def welcome(user, subdomain)</p>

<pre><code>@user = user
@subdomain = subdomain
attachments['test.pdf'] = File.read(Rails.root.join('public/test.pdf'))
attachments['photo.jpg'] = { :content =&gt; generate_image() }
mail(:to =&gt; @user.email, :subject =&gt; 'Welcome to TestApp') do |format|
  # Defaults to: welcome.html.erb, welcome.text.erb
  format.html { render 'other_html_welcome' }
  format.text { render 'other_text_welcome' }
end
</code></pre>

<p>  end
end
```</p>

<h2>respond_to and respond_with</h2>

<p>```ruby
class UsersController &lt; ApplicationController
  respond_to :html, :json, :only => :index
  respond_to :xml, :except => :index</p>

<p>  def index</p>

<pre><code>respond_with(@users = User.all, :status =&gt; :ok)
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@user = User.create(params[:user])
respond_with(@user) do |format|
  format.html { redirect_to(users_path) }
end
</code></pre>

<p>  end
end
```</p>

<h3>ACTIVEMODEL</h3>

<h2>Modules</h2>

<p><code>
AttributeMethods
Callbacks
Dirty
Errors
Naming
Observing
Serialization
Validations
</code></p>

<h2>Dirty</h2>

<p>```ruby
class Person
  include ActiveModel::Dirty
  define_attribute_methods [:name]</p>

<p>  def name</p>

<pre><code>@name
</code></pre>

<p>  end</p>

<p>  def name=(val)</p>

<pre><code>name_will_change!
@name = val
</code></pre>

<p>  end</p>

<p>  def save</p>

<pre><code>@previously_changed = changes
@changed_attributes.clear
</code></pre>

<p>  end
end</p>

<p>person = Person.find(id)
person.changed? # => false</p>

<p>person.name = 'Bob'
person.changed? # => true</p>

<p>person.name_changed? # => true</p>

<p>person.name_was # => 'Uncle Bob'</p>

<p>person.name_change # => ['Uncle Bob', 'Bob']</p>

<p>person.name = 'Bill'
person.name_change # => ['Uncle Bob', 'Bill']
```</p>

<h2>Validations</h2>

<p>```ruby
class Person
  include ActiveModel::Validations
  attr_accessor
  validates_presence_of :email
end</p>

<p>p = Person.new # => #
p.valid? # => false
p.errors # => {:email => ["can't be blank"]}
```</p>

<p><em>SHORTCUTS</em></p>

<p><code>ruby
validates :terms, :acceptance =&gt; true
validates :password, :confirmation =&gt; true
validates :username, :exclusion =&gt; { :in =&gt; %w(admin) }
validates :email, :format =&gt; {
  :with =&gt; /\A[^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i,
  :on =&gt; :create }
validates :age, :inclusion =&gt; { :in =&gt; 0..9 }
validates :first_name, :length =&gt; { :maximum =&gt; 30 }
validates :age, :numericality =&gt; true
validates :username, :presence =&gt; true
validates :username, :uniqueness =&gt; true
</code></p>

<h2>Serialization</h2>

<p>```ruby
class Person
  include ActiveModel::Serializers::JSON
  attr_accessor :name
  def attributes</p>

<pre><code>{:name =&gt; name}
</code></pre>

<p>  end
end</p>

<p>p = Person.new # => #
p.name = "Gregg" # => "Gregg"
p.to_json => "{\"name\":\"Gregg\"}"
```</p>

<h2>Callbacks</h2>

<p>```ruby
class Person
  extend ActiveModel::Callbacks
  define_model_callbacks :save
  before_save :action_before_save</p>

<p>  def save</p>

<pre><code>_run_save_callbacks do
  # Your save action methods here
end
</code></pre>

<p>  end
  private</p>

<p>  def action_before_save</p>

<pre><code># Your code here
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>
