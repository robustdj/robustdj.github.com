<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Programifications]]></title>
  <link href="programifications.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="programifications.com/"/>
  <updated>2013-03-31T20:27:29-07:00</updated>
  <id>programifications.com/</id>
  <author>
    <name><![CDATA[Derrick Camerino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec Formatter Documentation with instant stack traces upon failure]]></title>
    <link href="programifications.com/blog/2012/02/05/rspec-formatter-documentation-with-instant-stack-traces-upon-failure/"/>
    <updated>2012-02-05T01:49:00-08:00</updated>
    <id>programifications.com/blog/2012/02/05/rspec-formatter-documentation-with-instant-stack-traces-upon-failure</id>
    <content type="html"><![CDATA[<p>The documentation rspec formatter is nice to read, but the bad thing about it is that when a failure occurs,
it doesn't show a stack trace until the end of the test run. If you have a long running test suite, you might want to look
into the first few failures you encounter while the test suite finishes running.</p>

<p>With this simple formatter, it accomplishes exactly that.</p>

<p><div><script src='https://gist.github.com/2571615.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Now when the test suite runs, the stack trace gets printed right away upon failures.</p>

<p>```
$ bundle exec rspec spec/models/player_spec.rb</p>

<p>Player
  #next</p>

<pre><code>in the main stream
  should return the next song
  should decrement play count if the song was skipped
  playing the first song
    should fetch and return the first song (FAILED - 1)
</code></pre>

<p>  1) Player#next in the main stream playing the first song should fetch and return the first song</p>

<pre><code> Failure/Error: fail
 RuntimeError:
 # ./spec/models/player_spec.rb:24:in `block (5 levels) in &lt;top (required)&gt;'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example.rb:48:in `instance_eval'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example.rb:48:in `block in run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example.rb:107:in `with_around_hooks'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example.rb:45:in `run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:294:in `block in run_examples'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:290:in `map'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:290:in `run_examples'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:262:in `run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `block in run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `map'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `block in run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `map'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `block in run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `map'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/example_group.rb:263:in `run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/command_line.rb:24:in `block (2 levels) in run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/command_line.rb:24:in `map'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/command_line.rb:24:in `block in run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/reporter.rb:12:in `report'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/command_line.rb:21:in `run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/runner.rb:80:in `run_in_process'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/runner.rb:69:in `run'
 # /Users/derrick/.rvm/gems/ruby-1.9.2-p0@player/gems/rspec-core-2.6.4/lib/rspec/core/runner.rb:11:in `block in autorun'
    should increment play count and track listen for the current user
  attempting to play a post with an error
    should mark a song as erroneous
  going back a song then going forward
    should play the next song that it once played before
</code></pre>

<p>  #previous</p>

<pre><code>in the main stream
  should return the previous song
  should increment play count and track listen for the current user
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 Cheat Sheet]]></title>
    <link href="programifications.com/blog/2010/12/29/rails-3-cheat-sheet/"/>
    <updated>2010-12-29T23:45:00-08:00</updated>
    <id>programifications.com/blog/2010/12/29/rails-3-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Envy Labs just released some Rails 3 cheat sheets to aid the API usage of several components. The pdf can be found
<a href="http://blog.envylabs.com/post/29044764623/rails-3-cheat-sheets">here</a>.</p>

<h3>ROUTING API</h3>

<h2>Basic Routing</h2>

<p><code>ruby
YourApp::Application.routes.draw do
  resources :posts
  match '/all' =&gt; 'posts#index'
  root :to =&gt; "home#index"
end
</code></p>

<h2>Optional Parameters</h2>

<p>```ruby
match '/posts/(/:yy(/:mm))' => "posts#index"</p>

<p>class PostsController &lt; ApplicationController
  def index</p>

<pre><code># params[:yy]
# params[:mm]
</code></pre>

<p>  end
end
```</p>

<h2>Nested Routes</h2>

<p>```ruby
namespace :api do
  namespace :internal do</p>

<pre><code>resources :accounts do
  resources :orders
  member do
    get  :summary
    post :suspend
  end
  post :confirm, :on =&gt; :member
  collection do
    get :pending
  end
  get :blocked, :on =&gt; :collection
end
</code></pre>

<p>  end
end
```</p>

<h2>Redirection</h2>

<p><code>ruby
match '/sign_out'     =&gt; redirect("/signout")
match '/users/:name'  =&gt; redirect {|params| "/#{params[:name}"}
match '/google'       =&gt; redirect('http://google.com')
</code></p>

<h2>Named Routes</h2>

<p><code>ruby
match '/sign_in' =&gt; 'session#new', :as =&gt; 'sign_in' # Gives you sign_in_path helper
match '/reset_password/:token' =&gt; 'users#reset_password', :as =&gt; 'reset_password' # Gives reset_password_path('key')
</code></p>

<h1>Rack Routing</h1>

<p><code>ruby
get '/hello'          =&gt; proc {|env| [200, {}, "Hello Rack"]}
get '/rack_endpoint'  =&gt; PostsController.action(:index)
get '/rack_app'       =&gt; CustomRackApp
</code></p>

<h2>Constraints</h2>

<p>```ruby
match '/:year' => "posts#index",
  :constraints => {:year => /\d{4}/, :ip => /192.168.1.\d{1,3}/}</p>

<p>constraints(:host => /localhost/) do
  resources :posts
end</p>

<p>constraints IpRestrictor do # Responds to self.matches?(request)
  get 'admin/accounts' => "queenbee#accounts"
end
```</p>

<h2>Legacy Route</h2>

<p><code>ruby
match '/:controller(/:action(/:id(.:format)))' # Commented out by default
</code></p>

<h2>Scope</h2>

<p>```ruby
scope ':token', :token => /\w{5}/ do # Requires token parameter to get to resources and must by 5 alphanumeric characters
  resources :rooms do</p>

<pre><code>resources :meetings
</code></pre>

<p>  end
end</p>

<p>scope '(:locale)', :locale => /en|pl/ do # Local is optional for these routes
  resources :posts
  root :to => 'posts#index'
end
```</p>

<h3>BUNDLER</h3>

<h2>Bundler Commands</h2>

<p>```
$ bundle
'Make sure all dependencies in your Gemfile are available to your application. If they are not available, go install them.</p>

<p>$ bundle --without
'Installs everything except gems included in .</p>

<p>$ bundle --deployment
'Isolates all gems into vendor/bundle, requires up-to-date Gemfile.lock, use gems in vendor/cache if they exist.</p>

<p>$ bundle check
'Checks if the dependencies listed in Gemfile are satisfied by currently installed gems.</p>

<p>$ bundle show [gem_name]
'Shows all libraries which are included by the Gemfile and their dependencies. If [gem_name] is given, shows where it is located in the filesystem.</p>

<p>$ bundle open <br/>
'Opens the gem source in the default editor.</p>

<p>$ bundle update [gem_name]
'Recreates Gemfile.lock and runs 'bundle' to install new dependencies.</p>

<p>$ bundle package
'Copies all project gems to vendor/cache/ -- use this if you don't want to rely on external servers for deployment.
```</p>

<h2>Gemfile Syntax</h2>

<p>```ruby
source "http://rubygems.org"</p>

<p>gem "hpricot", "0.6"
gem "sqlite3-ruby", :require => "sqlite3"
gem "local_gem", :path => "~/Sites/local_gem"
gem "rails", :git => "git://github.com/rails/rails.git"</p>

<h1>Additional parameters</h1>

<h1>:branch => "branch_name"</h1>

<h1>:tag => "tag_number"</h1>

<h1>:ref => "ref_number"</h1>

<p>git "git://github.com/rails/rails.git" do
  # only these two gems will be fetched from the git repository
  gem "railties"
  gem "active_model"
end</p>

<p>group :test do
  gem "webrat"
end
```</p>

<h2>Creating a gemset for your app</h2>

<p><code>
$ rvm use _ruby_version_
$ rvm gemset create _name_
$ rvm gemset use _name_
$ gem install bundler
$ bundle
</code></p>

<h3>Workflow</h3>

<h2>Developing a new application</h2>

<ol>
<li>$ cd new_app/</li>
<li>$ bundle init # creates a new Gemfile</li>
<li>Add project dependencies</li>
<li>Check Gemfile and Gemfile.lock into VCS</li>
</ol>


<p>After adding or removing dependencies from Gemfile</p>

<ol>
<li>$ bundle</li>
<li><p>Commit Gemfile and Gemfile.lock
After modifying existing dependency versions</p></li>
<li><p>$ bundle update</p></li>
<li>Commit Gemfile and Gemfile.lock
Deploying your application</li>
</ol>


<p><code>
$ bundle pacakge # locally  
</code></p>

<p>Copies all app gems to vendor/cache</p>

<p><code>
$ bundle # server  
</code>
Installs gems from vendor/cache - no external server communication</p>

<p>For more info, visit <a href="http://gembundler.com">http://gembundler.com</a></p>

<h3>ACTIVERELATION</h3>

<h2>Lazy Loading</h2>

<p>```ruby
@posts = Post.where(:published => true)
if params[:order]
  @posts = @posts.order(params[:order])
end
@posts.each {|p| ... }</p>

<p>posts = Post.order(params[:order])
@published = posts.where(:published => true)
@unpublished = posts.where(:published => false)
```</p>

<h2>CRUD Methods</h2>

<p>```ruby
new(attributes)
create(attributes)
create!(attributes)
find(id_or_array)
destroy(id_or_array)
destroy_all
delete(id_or_array)
delete_all
update(ids, updates)
update_all(updates)
exists?</p>

<p>sports_posts = Post.where(:category => 'sports')
new_sports_post = sports_posts.new
new_sports_post.category # => 'sports'</p>

<p>sports_posts.update_all(:published => false)
sports_posts.exists? # => true
```</p>

<h2>Chain Methods</h2>

<p><code>
where
having
select
group
order
limit
offset
joins
includes
lock
readonly
from
</code></p>

<h2>Chaining</h2>

<p>```ruby
@posts = Post.where(:published => true).order(params[:order])</p>

<p>@joe_posts = Post.where(:auther => "Joe").includes(:comments).limit(10).all # .all forces query execution and returns an array, not a relation
```</p>

<h2>(Named) Scopes</h2>

<p><code>ruby
class Post &lt; ActiveRecord::Base
  default_scope order('title')
  scope :published, where(:published =&gt; true)
  scope :unpublished, where(:published =&gt; false)
</code></p>

<h2>Deprecated</h2>

<p><code>ruby
find(id_or_array, options) # All options are now sent using the chain methods
find(:first, options)
find(:all, options)
first(options)
all(options)
update_all(updates, conditions, options)
</code></p>

<h3>XSS PROTECTION &amp; UJS</h3>

<h2>XSS Protection</h2>

<p>```ruby
&lt;%= @post.body # safe by default %></p>

<p>&lt;%= raw(@post.body) # unsafe %></p>

<p>&lt;%= link_to raw("<span class='cart'>#{h @user_input}</span>"), cart_path # only h @user_input escaped, not the spans %>
```</p>

<h2>Unobtrusive JS</h2>

<p>```erb
&lt;%= link_to 'Show', @post, :remote => true %></p>

<h1>=> <a href="programifications.com/posts/1" data-remote="true">Show</a></h1>

<p>&lt;%= form_for(@post, :remote => true) do |f| %></p>

<h1>=> <form action="/posts" class="new_post" data-remote="true" id="new_post" method="posts"></h1>

<p>&lt;%= link_to 'Destroy', @post, :method => :delete %></p>

<h1>=> <a href="programifications.com/posts/1" data-method="delete" rel="nofollow">Destroy</a></h1>

<p>&lt;%= link_to 'Destroy', @post, :confirm => 'Are you sure?', :method => :delete %></p>

<h1>=> <a href="programifications.com/posts/1" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Destroy</a></h1>

<p>&lt;%= f.submit :disable_with => "Please wait..." %></p>

<h1>=> <input data-disable-with="Please wait..." id="post_submit" name="commit" type="submit" value="Create Post" /></h1>

<p>```</p>

<h2>HTML5 Custom Data Attributes</h2>

<p>```ruby
data-remote
data-confirm
data-method
data-disable-with</p>

<h1>Parsed by JavaScript drivers -- defaults to rails.js</h1>

<p>```</p>

<h2>Deprecated</h2>

<p>```ruby
link_to_remote
remote_form_for
observe_field
observe_form
form_remote_tag
button_to_remote
submit_to_remote
link_to_function
periodically_call_remote</p>

<h1>If you need to use any of the deprecated helpers, visit http://github.com/rails/prototype_legacy_helper</h1>

<p>```</p>

<h2>Using JQuery</h2>

<p>Go to <a href="https://github.com/rails/jquery-ujs">https://github.com/rails/jquery-ujs</a> for instructions</p>

<h3>ACTIONMAILER &amp; ACTIONCONTROLLER</h3>

<h2>Rails Mail Generator</h2>

<p>```
rails generate mail UserMail welcome forgot_password</p>

<h1>Creates:</h1>

<h1>app/mailers/user_mailer.rb</h1>

<h1>app/views/user_mailer/welcome.text.erb</h1>

<h1>app/views/user_mailer/forgot_password.text.erb</h1>

<p>```</p>

<h2>Basic Mailer Syntax</h2>

<p>```ruby
class UserMailer &lt; ActionMailer::Base
  def welcome(user, subdomain)</p>

<pre><code># instance variables are available within your view
@user = user
@subdomain = subdomain
mail(:from =&gt; 'admin@app.com',
     :to =&gt; @user.email,
     :subject =&gt; 'Welcome')
</code></pre>

<p>  end
end
```</p>

<h2>Delivering Messages</h2>

<p>```ruby
UserMailer.welcome(user, subdomain).deliver</p>

<h1>or</h1>

<p>message = UserMailer.welcome(user, subdomain)
message.deliver
```</p>

<h2>Defaults and Attachments</h2>

<p>```ruby
class UserMailer &lt; ActionMailer::Base
  default :from => 'admin@test.com',</p>

<pre><code>      :reply_to =&gt; 'noreply@test.com',
      "X-Time-Code" =&gt; Time.now.to_i.to_s
</code></pre>

<p>  def welcome(user, subdomain)</p>

<pre><code>@user = user
@subdomain = subdomain
attachments['test.pdf'] = File.read(Rails.root.join('public/test.pdf'))
attachments['photo.jpg'] = { :content =&gt; generate_image() }
mail(:to =&gt; @user.email, :subject =&gt; 'Welcome to TestApp') do |format|
  # Defaults to: welcome.html.erb, welcome.text.erb
  format.html { render 'other_html_welcome' }
  format.text { render 'other_text_welcome' }
end
</code></pre>

<p>  end
end
```</p>

<h2>respond_to and respond_with</h2>

<p>```ruby
class UsersController &lt; ApplicationController
  respond_to :html, :json, :only => :index
  respond_to :xml, :except => :index</p>

<p>  def index</p>

<pre><code>respond_with(@users = User.all, :status =&gt; :ok)
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@user = User.create(params[:user])
respond_with(@user) do |format|
  format.html { redirect_to(users_path) }
end
</code></pre>

<p>  end
end
```</p>

<h3>ACTIVEMODEL</h3>

<h2>Modules</h2>

<p><code>
AttributeMethods
Callbacks
Dirty
Errors
Naming
Observing
Serialization
Validations
</code></p>

<h2>Dirty</h2>

<p>```ruby
class Person
  include ActiveModel::Dirty
  define_attribute_methods [:name]</p>

<p>  def name</p>

<pre><code>@name
</code></pre>

<p>  end</p>

<p>  def name=(val)</p>

<pre><code>name_will_change!
@name = val
</code></pre>

<p>  end</p>

<p>  def save</p>

<pre><code>@previously_changed = changes
@changed_attributes.clear
</code></pre>

<p>  end
end</p>

<p>person = Person.find(id)
person.changed? # => false</p>

<p>person.name = 'Bob'
person.changed? # => true</p>

<p>person.name_changed? # => true</p>

<p>person.name_was # => 'Uncle Bob'</p>

<p>person.name_change # => ['Uncle Bob', 'Bob']</p>

<p>person.name = 'Bill'
person.name_change # => ['Uncle Bob', 'Bill']
```</p>

<h2>Validations</h2>

<p>```ruby
class Person
  include ActiveModel::Validations
  attr_accessor
  validates_presence_of :email
end</p>

<p>p = Person.new # => #
p.valid? # => false
p.errors # => {:email => ["can't be blank"]}
```</p>

<p><em>SHORTCUTS</em></p>

<p><code>ruby
validates :terms, :acceptance =&gt; true
validates :password, :confirmation =&gt; true
validates :username, :exclusion =&gt; { :in =&gt; %w(admin) }
validates :email, :format =&gt; {
  :with =&gt; /\A[^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i,
  :on =&gt; :create }
validates :age, :inclusion =&gt; { :in =&gt; 0..9 }
validates :first_name, :length =&gt; { :maximum =&gt; 30 }
validates :age, :numericality =&gt; true
validates :username, :presence =&gt; true
validates :username, :uniqueness =&gt; true
</code></p>

<h2>Serialization</h2>

<p>```ruby
class Person
  include ActiveModel::Serializers::JSON
  attr_accessor :name
  def attributes</p>

<pre><code>{:name =&gt; name}
</code></pre>

<p>  end
end</p>

<p>p = Person.new # => #
p.name = "Gregg" # => "Gregg"
p.to_json => "{\"name\":\"Gregg\"}"
```</p>

<h2>Callbacks</h2>

<p>```ruby
class Person
  extend ActiveModel::Callbacks
  define_model_callbacks :save
  before_save :action_before_save</p>

<p>  def save</p>

<pre><code>_run_save_callbacks do
  # Your save action methods here
end
</code></pre>

<p>  end
  private</p>

<p>  def action_before_save</p>

<pre><code># Your code here
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encapsulating Application Config Variables in a YAML File]]></title>
    <link href="programifications.com/blog/2010/12/13/encapsulating-application-config-variables-in-a-yaml-file/"/>
    <updated>2010-12-13T23:41:00-08:00</updated>
    <id>programifications.com/blog/2010/12/13/encapsulating-application-config-variables-in-a-yaml-file</id>
    <content type="html"><![CDATA[<p>Having different configurations for different environments can get messy especially as your project grows. Environment files
start to get long and switching between all the different files becomes a hassle. One technique I like is to encapsulate all
of the configuration variables in a YAML file and then loading it up into a global hash during initialization.</p>

<p>I recently dealt with a case using paperclip and had different settings depending on the environment. On production servers
we wanted to use s3 for storage and locally we wanted to use the filesystem. At first we set up constants (to hold paperclip
settings) in each of our environment files. So we had something like this in each of our environment(<code>test.rb</code>,
<code>development.rb</code>, <code>production.rb</code>, etc) files:</p>

<p><code>ruby
PAPERCLIP_STORAGE_OPTIONS = {
  :storage =&gt; :s3,
  :s3_credentials =&gt; "#{Rails.root}/config/s3.yml",
  :styles =&gt; { :original =&gt; "800x600&gt;", :medium =&gt; "300x300#", :thumb =&gt; "100x100#"
  :path =&gt; "/user_images/:id/:style/:filename",
  :convert_options =&gt; { :all =&gt; "-strip" }
}
</code></p>

<p>In translating it to YAML (<code>config/config.yml</code> in my case), it looked like this:</p>

<p>```yaml
paperclip_storage_options: &amp;paperclip
  styles:</p>

<pre><code>original: "800x600&gt;"
medium: "300x300#"
thumb: "100x100#"
</code></pre>

<p>  path: ":rails_root/public/user_images/:id/:style/:filename"
  convert_options:</p>

<pre><code>all: "-strip"
</code></pre>

<p>defaults: &amp;defaults
  paperclip_storage_options:</p>

<pre><code>&lt;&lt;: *paperclip
</code></pre>

<p>deployed_defaults: &amp;deployed_defaults
  &lt;&lt;: *defaults
  paperclip_storage_options:</p>

<pre><code>&lt;&lt;: *paperclip
storage: "s3"
s3_credentials: "&lt;%= RAILS_ROOT %&gt;/config/s3.yml"
</code></pre>

<p>development:
  &lt;&lt;: *defaults</p>

<p>test:
  &lt;&lt;: *defaults</p>

<p>qa:
  &lt;&lt;: *deployed_defaults</p>

<p>production:
  &lt;&lt;: *deployed_defaults
```</p>

<p>And so now each environment can have its own configurations and it’s nicely encapsulated in one file. You may notice that we
have embedded ruby in the YAML file. We just have to feed it into ERB when we load the YAML. Let’s take a look at
<code>config/initializers/config.rb</code>:</p>

<p><code>ruby
APP_CONFIG = YAML.load(ERB.new(File.read("#{Rails.root}/config/config.yml")).result)[Rails.env].recursive_symbolize_keys
</code>
You can actually ignore the recursive_symbolize_keys, as I only had to do that since paperclip only takes symbolized
arguments. While this snippet of code isn’t the prettiest, it works well and enables global config encapsulation. First
it’s reading the YAML file, interpreting the ruby code, converting it into a hash, and then finally storing it into a
constant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hash#recursive_symbolize_keys]]></title>
    <link href="programifications.com/blog/2010/12/13/hash-number-recursive-symbolize-keys/"/>
    <updated>2010-12-13T23:38:00-08:00</updated>
    <id>programifications.com/blog/2010/12/13/hash-number-recursive-symbolize-keys</id>
    <content type="html"><![CDATA[<p>Surprisingly there isn’t a <code>Hash#recursive_symbolize_keys</code> method so here’s code to accomplish that:</p>

<p>```ruby
class Hash
  def recursive_symbolize_keys</p>

<pre><code>symbolize_keys!
values.select{|v| v.is_a? Hash}.each{|h| h.recursive_symbolize_keys}
self
</code></pre>

<p>  end
end
```</p>

<p>Sometimes gems/plugins only take arguments in the form of symbols so this can method can be handy if you have some
sort of nested config hash.</p>

<p>Credits to: <a href="http://grosser.it/2009/04/14/recursive-symbolize_keys/">http://grosser.it/2009/04/14/recursive-symbolize_keys/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Bundler with Capistrano]]></title>
    <link href="programifications.com/blog/2010/12/11/using-bundler-with-capistrano/"/>
    <updated>2010-12-11T23:37:00-08:00</updated>
    <id>programifications.com/blog/2010/12/11/using-bundler-with-capistrano</id>
    <content type="html"><![CDATA[<p>To make capistrano build your gems with bundler you can use the following code snippet:</p>

<p>```ruby
namespace :bundle do
  task :install, :roles => :app do</p>

<pre><code>shared_dir = File.join(shared_path, 'bundle')
run "mkdir -p #{shared_dir}"
run "cd #{release_path} &amp;&amp; bundle install --without development test --path #{shared_dir}"
</code></pre>

<p>  end
end</p>

<p>after 'deploy:update_code', 'bundle:install'
```</p>

<p>Of course, this is assuming that you already have bundler installed on your remote server.</p>
]]></content>
  </entry>
  
</feed>
